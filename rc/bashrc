#!/usr/bin/env bash

# This file is part of Kratos.
# Copyright (c) 2014-2016, Cody Opel <codyopel@gmail.com>.
#
# Use of this source code is governed by the terms of the
# BSD-3 license.  A copy of the license can be found in
# the `LICENSE' file in the top level source directory.

[[ $- == *i* ]] || return

set -o errexit
set -o errtrace
set -o functrace
###set -o nounset
set -o pipefail

# Initalize shell configuration
export KRATOS_DIR="${HOME}/.kratos"
export DOTFILES_DIR="${HOME}/.dotfiles"

if [ -z ${KRATOS_SHELL_INIT+x} ] ; then
  if [ -f "${KRATOS_DIR}/vendor/lib-bash/src/share/lib-bash/lib.bash" ] ; then
    source "${KRATOS_DIR}/vendor/lib-bash/src/share/lib-bash/lib.bash"
  elif
    pushd "${KRATOS_DIR}"
      git submodule update --init --recursive
    popd ; then
    source "${KRATOS_DIR}/vendor/lib-bash/src/share/lib-bash/lib.bash"
  elif type 'lib-bash' ; then
    source "$(lib-bash)"
  else
    # TODO: test this to make sure user can fallback to regular shell if
    #       lib-bash is unavailable
    exec bash -i --noprofile --norc
    exit $?
  fi
  source "${KRATOS_DIR}/lib/core.bash"
  source "${KRATOS_DIR}/lib/DEFAULTS.bash"
  if [ -f "${HOME}/.local/share/kratos/preferences" ] ; then
    source "${HOME}/.local/share/kratos/preferences"
  fi
  if [ -f "${HOME}/.local/share/kratos/is-installed" ] ; then
    source "${HOME}/.local/share/kratos/is-installed"
  fi
  if [ -f "${HOME}/.config/kratos/config" ] ; then
    source "${HOME}/.config/kratos/config"
  fi
  if [ -f "${HOME}/.cache/kratos/cache-rc" ] ; then
    source "${HOME}/.cache/kratos/cache-rc"
  fi
fi

# The function `shell` should fail to return anything on most shells other
# than bash.
if [ "$(shell || true)" != 'bash' ] && type bash > /dev/null ; then
  exec bash -i
  exit $?
fi

if [ -z ${KRATOS_SHELL_INIT+x} ] ; then
  Loader::All 'main'
  # This is a bit of a hacky lock file implementation, but
  # guarantees that it is portable.
  if [ ! -f "${HOME}/.cache/kratos/KRATOS_START" ] ; then
    Loader::All 'start'
    if [ -d "${HOME}/.cache" ] ; then
      Directory::Create "${HOME}/.cache/kratos"
      touch "${HOME}/.cache/kratos/KRATOS_START"
    fi
  fi

  if [ ${KRATOS_IS_LOGIN_SHELL} ] ; then
    Loader::All 'login'
  fi

  Loader::All 'interactive'

  Path::Add "${HOME}/.bin"

  if [ ! -f "${HOME}/.cache/kratos/cache-rc" ] ; then
    KRATOS_CURRENT_KERNEL="$(OS::Kernel)"
    KRATOS_CURRENT_LINUX="$(OS::Linux || true)"
    # DEPRECATED
    KRATOS_CURRENT_SHELL='bash'
  fi

  # Cache rc startup calls to prevent unnecessary forking
  if [ -d "${HOME}/.cache/kratos" ] && \
     [ ! -f "${HOME}/.cache/kratos/cache-rc" ] ; then
    File::Create "${HOME}/.cache/kratos/cache-rc"
    echo "KRATOS_CURRENT_KERNEL='$(OS::Kernel)'" > \
      "${HOME}/.cache/kratos/cache-rc"
    echo "KRATOS_CURRENT_LINUX='$(OS::Linux || :)'" >> \
      "${HOME}/.cache/kratos/cache-rc"
    # DEPRECATED
    echo "KRATOS_CURRENT_SHELL='bash'" >> \
      "${HOME}/.cache/kratos/cache-rc"
  fi

  KRATOS_SHELL_INIT=true
fi

# Load the local config
if [ -f "${HOME}/.bashrc.local" ] ; then
  source "${HOME}/.bashrc.local"
fi

# Disable errexit for interactive shells once initialized
set +e
