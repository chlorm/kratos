#!/usr/bin/env sh

git_cd () {

  if [ -z "$1" ] ; then
    svar DIRCONF dir_conf || return 1
    cd "$DIRCONF"
  else
    cd "$1"
  fi

}

git_cbr () {( # Gets the current git branch

    git_cd $1 || return 1

    git rev-parse --abbrev-ref HEAD 2>/dev/null

)}

git_pull () {( # Updates the root git tree

    # Returns 2 if failed, 1 if updated, 0 if up-to-date

    git_cd $1 || return 2

    git reset --hard >/dev/null 2>&1

    STR="$(git pull origin "$(git_cbr $1)" 2>&1)" || return 2

    [ "$(echo "$STR" | grep 'Already up-to-date.')" != "" ]

)}

git_pull_nostat () { # Updates the root git tree and only returns >0 on error

  git_pull $@
  case "$?" in

    2)
      return 1
      ;;

    1)
      echo "Updated"
      ;;

  esac

}

git_sub_init () { # Initialize git submodules

  # Returns 2 if failed, 1 if initialized, 0 if up-to-date

  local ACUM

  ACUM=0

  git_cd $1 || return 2

  array_from_str SUBS "$(git submodule status --recursive | grep -ve "([^)]*)" | awk '{print $2}')"

  array_forall SUBS git_sub_init_one || return 2

  return $ACUM

}

git_sub_init_one () {

  git submodule -q update --init --recursive "$1" || return 1

  ACUM=1

}


git_sub_pull () { # Update the submodules

  # Returns 2 if failed, 1 if updated, 0 if up-to-date

  git_cd $1 || return 2

  svar DIRCONF dir_conf || return 2

  STR="$(git submodule -q foreach --recursive "\"$DIRCONF/bin/run\" git_pull_nostat .")" || return 2

  [ "$(echo "$STR" | grep 'Updated')" = "" ]

}

config_latest () { # Gets the latest version of the git config

  # Returns 2 if failed, 1 if updated, 0 if up-to-date

  local ACUM

  ACUM=0

  git_pull
  case "$?" in

    2)
      echo "Failed to update the configuration directory" >&2
      return 2
      ;;

    1)
      ACUM=1
      ;;

  esac

  git_sub_init
  case "$?" in

    2)
      echo "Failed to initialize configuration submodules" >&2
      return 2
      ;;

    1)
      ACUM=1
      ;;

  esac

  git_sub_pull
  case "$?" in

    2)
      echo "Failed to update configuration submodules" >&2
      return 2
      ;;

    1)
      ACUM=1
      ;;

  esac

  return $ACUM

}

config_ln () { # Links the configuration file to its proper dotfile

  [ "$#" -eq "0" ] && return 1

  for LN in $@ ; do
    symlink "$(dir_conf)/dotfiles/$LN" "$HOME/.$LN" || { echo "ERROR: failed to symlink $LN" 2> /dev/null ; }
    [ "$?" -eq "0" ] && echo "  Symlinked $LN"
  done

}

config_install () { # Installs the configuration files

  echo "Configuring directories"
  xdg_dirs

  echo "Configuring PATH"
  symlink "$(dir_conf)/bin" "$HOME/.bin"
  path_add "$HOME/.bin"

  echo "Configuring Desktop Environment"
  deskenv_run && {
    echo "Configuring Programs"
    programs_graphical_configure
  }
  [ "$?" -ne "0" ] && { echo "Configuring Programs" ; }
  programs_headless_configure
  echo "Configuring Shell"
  shell_auto

}

config_update () { # Updates the configuration files and all of the submodules

  config_latest
  case "$?" in

    2)
      return 2
      ;;

    1)
      reload_all
      config_install
      ;;

  esac

}
