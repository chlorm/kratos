#!/usr/bin/env sh

git_cd() {

  if [ -z "$1" ] ; then
    cd "$DOTFILES_DIR"
  else
    cd "$1"
  fi

}

git_cbr() {( # Gets the current git branch

    git_cd $1 || return 1

    git rev-parse --abbrev-ref HEAD 2> /dev/null

)}

git_pull() {( # Updates the root git tree

    # Returns 2 if failed, 1 if updated, 0 if up-to-date

    git_cd $1 || return 2

    git reset --hard > /dev/null 2>&1

    STR="$(git pull origin "$(git_cbr $1)" 2>&1)" || return 2

    [ "$(echo "$STR" | grep 'Already up-to-date.')" != "" ]

)}

git_pull_nostat() { # Updates the root git tree and only returns >0 on error

  git_pull $@
  case "$?" in
    2)
      return 1
      ;;
    1)
      echo "Updated"
      ;;
  esac

}

git_sub_init() { # Initialize git submodules

  # Returns 2 if failed, 1 if initialized, 0 if up-to-date

  local ACUM

  ACUM=0

  git_cd $1 || return 2

  array_from_str SUBS "$(git submodule status --recursive | grep -ve "([^)]*)" | awk '{print $2}')"

  array_forall SUBS git_sub_init_one || return 2

  return $ACUM

}

git_sub_init_one() {

  git submodule -q update --init --recursive "$1" || return 1

  ACUM=1

}


git_sub_pull() { # Update the submodules

  # Returns 2 if failed, 1 if updated, 0 if up-to-date

  git_cd $1 || return 2

  STR="$(git submodule -q foreach --recursive "\"$DOTFILES_DIR/bin/run\" git_pull_nostat .")" || return 2

  [ "$(echo "$STR" | grep 'Updated')" = "" ]

}

config_latest() { # Gets the latest version of the git config

  # Returns 2 if failed, 1 if updated, 0 if up-to-date

  local ACUM

  ACUM=0

  git_pull
  case "$?" in
    2)
      echo "Failed to update the configuration directory" >&2
      return 2
      ;;
    1)
      ACUM=1
      ;;
  esac

  git_sub_init
  case "$?" in
    2)
      echo "Failed to initialize configuration submodules" >&2
      return 2
      ;;
    1)
      ACUM=1
      ;;
  esac

  git_sub_pull
  case "$?" in
    2)
      echo "Failed to update configuration submodules" >&2
      return 2
      ;;
    1)
      ACUM=1
      ;;
  esac

  return $ACUM

}

config_install() { # Installs the configuration files

  echo "Configuring directories"
  xdg_dirs || { echo "ERROR: failed to configure xdg directories" ; return 1 ; }

  echo "Configuring PATH"
  symlink "$DOTFILES_DIR/bin" "$HOME/.bin"
  path_add "$HOME/.bin" || { echo "ERROR: failed to add ~/.bin to PATH" ; return 1 ; }

  echo "Configuring Desktop Environments"
  deskenvs_configure || { echo "ERROR: failed to configure desktop environments" ; return 1 ; }

  echo "Configuring Programs"
  apps_configure || { echo "ERROR: failed to configure programs" ; return 1 ; }

  echo "Configuring Shells"
  shells_configure || { echo "ERROR: failed to configure shells" ; return 1 ; }

  return 0

}

config_update() { # Updates the configuration files and all of the submodules

  config_latest
  case "$?" in
    2)
      return 2
      ;;
    1)
      reload_all
      config_install
      ;;
  esac

}
